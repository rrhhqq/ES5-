第1章.js的简介
1.1 JavaScript简史
   1995，布兰登。艾奇开发Netscape Navigator 2的LiveScript. 改名JavaScript。
   1997年JavaScript 1.1。 微软在IE3中加入JScript。ECMA-262----ECMAScript。
   js 2:编辑加工的结果。没增删改。
   js 3:成为真正的编程语言
   js 4:全面修订。完全定义了一门新语言。跨域太大，没发布就放弃。
   js 5:2009,
   es6:2015。
1.2 DOM
   DOM:针对XML经过扩展用于html的应用程序编程接口。
   W3C制定标准规划DOM。
   DOM1:两个模块DOM核心和DOM HTML。核心规定如何映射基于XML的文档结构，简化访问和操作。DOM HTML则扩展并添加了对HTML的对象和方法。
   DOM2:引入了了新模块和新类型以及新接口。视图接口，事件和事件处理接口，样式接口，遍历和操作文档树的接口。
   DOM3：引入了统一加载和保存文档的方法，新增了验证文档的方法。核心扩展，开始支持xml1.0规范。

第2章.js如何在html中使用
   <script>:async立即下载脚本，单不应妨碍页面的其它操作。
            charset指定脚本代码的字符集。
            defer表示延迟到文档完全被解释和显示之后再执行，只对外部文件有效。
            language表示编写代码的脚本语言。
            src表示要执行代码的外部文件。
            type表示脚本语言的内容类型，language的替代属性。
  2.1在xhtml中需要更严格，用html实体代替代码不好理解，用CDate片段，不支持CData就注释一下。
  2.4<noscript>元素

第3章.基本概念
   3.1区分大小写；标识符驼峰：第一个字母小写，剩下每个词首字母大写；
      函数体内用严格模式"use strict"执行结果大不同，不确定行为得到处理，不安全操作也会抛出错误。
    3.2关键字和保留字
    3.3变量
    3.4五种简单数据类型 Underfined,Null,Boolean,Number,String和复杂类型Object
    typeof操作符
    Underfined和Null都只有一个值，Boolean只有两个值true和false,Number的八进制前有 0，十六进制前以后0x,浮点数据的最高精度是17位小数。
    NaN不与任何值相等，有isNaN()函数。
    数值转换：Number()，parseInt(),parseFloat()。
    string值不能变。toString()函数
    Object，构造函数constructor(),hasOwnProperty(propertyName),isPrototypeOf(object),
     propertyIsEnumerable(proppertyName),toLocalString(),toString(),
    valueOf().
    3.5
     一元操作符，位操作符。负数的存储用二进制补码，绝对值，反码，加1。
     按位非~：操作数的负数减1；
     按位与&；按位或|，按位异或^；左移<<不影响符号位,有符号右移>>保留符号位，无符号右移>>>对于负数有影响，因为是以0填充空位。
     逻辑非!,逻辑与&&，逻辑或||，
     乘法*，求模（余数）%，除法/，关系操作符。条件操作符，赋值操作符，逗号操作符
    3.6
     if语句，do-while语句,while语句，for语句，for-in语句美剧对象的属性。label语句给代码段添加标签，以便将来使用。
     switch语句跟其它语言限定数值不同，数据类型多样。
     break跳出循环，continue执行跳出后的语句继续循环。   
     with语句讲代码作用域设置到一个特定的对象中。
     3.7函数
      函数参数对象与数组类似，不强制显式命名参数。函数没有重载，会覆盖。

第4章 变量 作用域和内存问题
     
     引用类型的值按索引访问，添加属性操作的确实对象本身。所有函数的参数就是按值传递。
    instanceof操作符判断是否给定类型的实例。result=variable instanceof constructor
    每个函数都有自己的执行环境。代码在一个环境中执行，创建变量环境对象的作用域链。
    作用域延长：try-catch语句的catch块，with语句。在作用域的前端添加一个变量对象。
    没有块作用域。初始化变量没有使用var声明，该变量自动被添加到全局环境。
    垃圾收集器，标记清除：变量进入环境标记为“进入环境”，离开标记“离开环境”。
    引用计数垃圾收集策略有循环引用的问题，可以设置为null来避免。
    解除引用：数据不再有用，设置为null。
    
第5章 引用类型
   
  5.1 Object类型可以通过new操作符和object构造函数一起来创建实例，还可以通过对象字面量来表示。多采用字面量模式。
    访问对象属性使用点表示法，也可以用方括号法，方括号法可以通过变量来访问属性。比如属性中使用关键字或保留字或空格。
  5.2 Array类型 数组的每一项可以保存任何类型的数据。数组大小动态调整。构造函数法和字面量法。
    检测数组:用instanceof，适应于一个全局执行环境，增加了Array.isArray()。 
    数组转换方法：所有对象都有toLocalString(),toString()和valueOf()方法。
    数组栈方法：push(),pop()；队列方法shift(),unshift()。
    数组重排列方法:reverse()倒序，sort()从小到大排列比较字符串。
    数组操作方法:concat()基于当前数组中所有项创建一个新数组。slice(index,index)截取数组内容生成新数组。
    splice()可以实现删除，插入，替换功能。
    数组位置方法：indexOf()和lastIndexOf()。
    迭代方法：every()对数组的每一项运行给定函数。filter()对每一项运行给定函数。
    forEach()对每一项运行给定函数，没有返回值。
    map()对每一项运行给定函数，返回每次函数结果组成的数组。some()对数组每一项运行给定函数，有一项为真则返回真。
    归并方法：reduce()和reduceRight()。
  5.3 Date类型。
  5.4 ReExp类型
    匹配模式支持标志：g,i,m。模式中的元字符都必须转义,包括( [{\^$|)?*+.]}
    实例属性：global,ignoreCase,lastIndex,multiline，source。
    exec()方法接受一个参数，即要应用模式的字符串。
    从exect()或test()操作者可以提出构造函数的属性input,lastMatch,lastParen，leftContext,multiline,rightContext。
  5.5 Function类型
    函数是对象。函数没有重载。函数声明提升。callee属性指向拥有arguments对象的函数。
    函数对象属性caller保存着调用当前函数的函数的引用。严格模式下访问callee和赋值caller会出错。
    函数对象的属性：length和prototype。

    函数对象的属性：length表示函数希望接收的命名参数的个数和prototype。
    使用call()或者apply()扩充作用域，对象不需要与方法有任何耦合关系。
    bind()函数创建函数实例，其this值会被绑定传到bind()函数的值。
    toFixed()方法按照指定小数位返回数值的字符串表示。
    toExponential()返回指数表示法。
    5.6 String类型
     字符方法charAt()和charCodeAt()操作方法：concat()用于将一个或多个字符串拼接起来得到新的字符串。
     slice(),substr(),substring()返回操作字符串的一个子字符串，对本身字符串没影响。
    位置方法： indexOf(),lastIndexOf()搜索给定的子字符串。trim()方法去除前置和后缀的所有空格。trimLeft()和trimRight()。
    大小写转换：toLowerCase()，toUpperCase,toLocaleLowerCase(),toLocaleUpperCase()。
   匹配方法：match()和search()，跟RegExp的exec()方法相同。replace()替代子字符串,split()基于指定的分隔符分割成多个子字符串。
   比较方法：localeCompare()，fromCharCode()
  5.7 Global对象
  URI编码方法：encodeURI()和encodeURIComponent(),  用特殊的utf-8编码替换所有无效的字符。
  后者对某一段会使用对应编码替换所有非字母数字字符，前者主要用于整个uri。对应两个方法decodeURI()和encodeURIComponent()。
   eval()方法最强大。
   对象属性：所有原生引用类型的构造函数，undefined,NaN,Infinity。
   window对象：通过它来访问global。
   Math对象各种数学处理方法。
第六章 面向对象的程序设计
    6.1
       对象：无序属性的集合。一组没特定顺序的值。基于引用类型的创建，没有类的概念。
       可通过构造函数和字面量来创建一个对象。
       数据属性：Configurable表示能否通过delete删除属性从而重新定义属性。
       Enumerable表示能否通过for-in循环返回属性。
       Writeable表示能否修改属性的值。Value包含这个属性的数据值。
       要修改属性的特性，必须使用Object.defineProperty(obj,name,obj_descrition)方法。
       访问器属性：包含一对getter和setter函数（非必需的）。具有四个特性：Configurable,Enumerable,Get,Set。
       访问器属性不能直接定义，必须使用Object.defineProperty()来定义。
       定义多个属性:Object.definePropertyes(obj,description_obj)。
       读取属性的特性：Object.getOwnProperDescriptor(obj,proper)。
    6.2创建对象
       Object构造函数：缺点是多个对象使用同一个接口，产生大量重复代码。
       工厂模式：用函数来封装以特定接口创建对象的细节。缺点是没有解决对象识别问题。
       构造函数模式：非显式创建对象，直接赋值给this对象。缺点是每个方法在每个实例上重新创建一遍。可以把方法放到构造函数外部。
       原型模式：每个函数都有一个原型prototype属性，是一个指针，指向一个对象。在原型对象中添加对象的信息。
       原型对象isPrototypeOf()确定对象间是否存在某种关系，Object.getPrototypeOf()返回对象。
       重新添加和原型对象中重名的属性，会屏蔽原型对象中的对象，除非用delete删除，才能重新链接上。
       使用hasOwnPropety()方法可以检测一个属性是存在于实例中还是存在于原型中。
       取得对象上所有可枚举的实例属性可以用Object.keys(obj)。
       得到所有实例属性，用Object.getOwnPropertyNames()。
       更简单的原型语法：用有一个包含所有属性和方法的对象字面量来重写整个原型对象。construtor指向会改变。
       重写原型对象切断了现有原型与任何之前已经存在的对象实例之间的联系，它引用的仍然是最初的原型对象。
       原型对象的问题，原型中所有属性都被许多实例共享，改变了就影响其它实例。
       组合使用构造函数与原型模式：构造函数模式定义实例属性，原型模式定义方法和共享的属性。
       动态原型模式：把所有信息都封装在构造函数中，在构造函数中初始化原型，通过检查某个应该存在的方法是否有效来决初始化原型。
       寄生构造函数模式：跟工厂模式一样。   
       稳妥构造函数模式：与寄生构造函数类似，但新创建实例方法不引用this,不使用new操作符调用构造函数。
    6.3继承
       原型链,让原型对象等于另一个类型的实例。本质上扩展了本章前面介绍的原型搜索机制。给原型添加方法的代码一定要放在替换原型的语句之后。
       在通过原型链实现继承时，不能使用对象字面量创建原型方法。因为这样做就会重写原型链。
       原型链的第一个问题：在通过原型来实现继承时，原型实际上会变成另一个类型的实例。
       原型链的第二个问题是：在创建子类型的实例时，不能向超类型的构造函数中传递参数。
       借用构造函数：在子类型构造函数的内部调用超类型构造函数,通过使用 call()方法（或 apply()方法也可以）。
       相对于原型链而言，借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数。
       如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此函数复用就无从谈起了。
       而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。
       组合继承（combination inheritance），有时候也叫做伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。
       其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。
       这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。
       组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为 JavaScript 中最常用的继承模式。
       原型式继承：先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。
       ECMAScript 5 通过新增 Object.create()方法规范化了原型式继承。
       这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。
       寄生式继承：思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，
       该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。
       寄生组合式继承：即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。
       其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。
       本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。


























